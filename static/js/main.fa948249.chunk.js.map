{"version":3,"sources":["components/Form.js","components/Card.js","components/CardList.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","username","setUsername","onSubmit","event","preventDefault","axios","get","then","resp","data","className","type","value","onChange","target","placeholder","required","Card","src","avatar_url","alt","name","login","public_repos","created_at","slice","location","bio","href","html_url","blog","CardList","id","cards","map","card","App","setCards","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"ySAqCeA,EAlCF,SAACC,GAAW,IAAD,EACYC,mBAAS,IADrB,mBACbC,EADa,KACHC,EADG,KAYpB,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAMC,iBAENC,IAAMC,IAAN,uCAA0CN,IAAYO,MAAK,SAACC,GACxDV,EAAMI,SAASM,EAAKC,MACpBR,EAAY,QAKcS,UAAU,2BACpC,yBAAKA,UAAU,cACX,2BACIC,KAAK,OACLC,MAAOZ,EACPa,SAAU,SAACV,GAAD,OAAWF,EAAYE,EAAMW,OAAOF,QAC9CG,YAAY,kBACZL,UAAU,2KACVM,UAAQ,IAEZ,4BACIL,KAAK,SACLD,UAAU,kQAFd,aCuBDO,EA/CF,SAACnB,GACV,OACI,yBAAKY,UAAU,2HACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,yBAAyBQ,IAAKpB,EAAMqB,WAAYC,IAAI,MAEvE,yBAAKV,UAAU,QACX,wBAAIA,UAAU,+CACTZ,EAAMuB,KACP,0BAAMX,UAAU,wCAAhB,IACMZ,EAAMwB,QAGhB,uBAAGZ,UAAU,mCACRZ,EAAMyB,aADX,6BACmDzB,EAAM0B,WAAWC,MAAM,EAAG,IAE7E,uBAAGf,UAAU,mCACRZ,EAAM4B,UAAY,IAEvB,uBAAGhB,UAAU,wCACRZ,EAAM6B,QAKvB,yBAAKjB,UAAU,gCACX,0BAAMA,UAAU,yCACZ,uBAAGkB,KAAM9B,EAAM+B,UAAU,4BAAQlB,KAAK,SAASD,UAAU,yQACrD,2CAKJ,uBAAGkB,KAAM9B,EAAMgC,MAAM,4BAAQnB,KAAK,SAASD,UAAU,oQACjD,+CC3BTqB,EARE,SAACjC,GAAD,OACb,yBAAKkC,GAAG,YAAYtB,UAAU,SACzBZ,EAAMmC,MAAMC,KAAI,SAACC,GAAD,OACb,kBAAC,EAASA,QCmBPC,MAlBf,WAAgB,IAAD,EACarC,mBAAS,IADtB,mBACNkC,EADM,KACCI,EADD,KAMb,OACE,6BACE,wBAAI3B,UAAU,0EAAd,wBAGA,kBAAC,EAAD,CAAMR,SATS,SAACiC,GAClBE,EAAS,GAAD,mBAAKJ,GAAL,CAAYE,QASlB,kBAAC,EAAD,CAAUF,MAAOA,MCPHK,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fa948249.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport axios from 'axios'\n\nconst Form = (props) => {\n    const [username, setUsername] = useState('')\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n\n        axios.get(`https://api.github.com/users/${username}`).then((resp) => {\n            props.onSubmit(resp.data)\n            setUsername('')\n        })\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className='w-full max-w-sm mx-auto'>\n            <div className='mt-10 flex'>\n                <input\n                    type='text'\n                    value={username}\n                    onChange={(event) => setUsername(event.target.value)}\n                    placeholder='GitHub username'\n                    className='form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150'\n                    required\n                />\n                <button\n                    type='submit'\n                    className='ml-2 py-2 px-3 border border-gray-300 rounded-md text-sm leading-4 font-medium text-gray-700 hover:text-gray-500 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue active:bg-gray-50 active:text-gray-800 transition duration-150 ease-in-out'\n                >\n                    Search\n        </button>\n            </div>\n        </form>\n    )\n}\n\nexport default Form","import React from 'react'\n\nconst Card = (props) => {\n    return (\n        <div className=\"px-4 py-5 sm:px-6 -ml-4 -mt-4 border-b border-gray-200 pb-8 flex justify-between items-center flex-wrap sm:flex-no-wrap\">\n            <div className=\"ml-4 mt-4\">\n                <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                        <img className=\"h-12 w-12 rounded-full\" src={props.avatar_url} alt=\"\" />\n                    </div>\n                    <div className=\"ml-4\">\n                        <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                            {props.name}\n                            <span className=\"text-sm leading-5 text-gray-500 pl-2\">\n                                @{props.login}\n                            </span>\n                        </h3>\n                        <p className=\"text-sm leading-5 text-gray-500\">\n                            {props.public_repos} repositories. User since {props.created_at.slice(0, 4)}\n                        </p>\n                        <p className=\"text-sm leading-5 text-gray-500\">\n                            {props.location || ''}\n                        </p>\n                        <p className=\"mt-1 text-sm leading-5 text-gray-500\">\n                            {props.bio}\n                        </p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"ml-4 mt-4 flex-shrink-0 flex\">\n                <span className=\"ml-3 inline-flex rounded-md shadow-sm\">\n                    <a href={props.html_url}><button type=\"button\" className=\"mr-2 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm leading-5 font-medium rounded-md text-gray-700 bg-white hover:text-gray-500 focus:outline-none focus:shadow-outline-blue focus:border-blue-300 active:bg-gray-50 active:text-gray-800\">\n                        <span>\n                            Profile\n            </span>\n                    </button>\n                    </a>\n                    <a href={props.blog}><button type=\"button\" className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm leading-5 font-medium rounded-md text-gray-700 bg-white hover:text-gray-500 focus:outline-none focus:shadow-outline-blue focus:border-blue-300 active:bg-gray-50 active:text-gray-800\">\n                        <span>\n                            Website\n            </span>\n                    </button>\n                    </a>\n                </span>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card.js'\n\nconst CardList = (props) => (\n    <div id=\"container\" className=\"mt-10\">\n        {props.cards.map((card) => (\n            <Card {...card} />\n        ))}\n    </div>\n)\n\nexport default CardList","import React, { useState } from 'react'\nimport './App.css';\nimport Form from './components/Form';\nimport CardList from './components/CardList'\n\n\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const addNewCard = (card) => {\n    setCards([...cards, card])\n  }\n  \n  return (\n    <div>\n      <h1 className='pt-10 text-center mt-6 text-3xl leading-9 font-extrabold text-gray-900'>\n        Search a GitHub User\n    </h1>\n      <Form onSubmit={addNewCard} />\n      <CardList cards={cards} />\n\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}